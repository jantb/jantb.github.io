<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sipp</title>
    <link>https://sipp.io/</link>
    <description>Recent content on sipp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Apr 2015 19:57:12 +0200</lastBuildDate>
    <atom:link href="https://sipp.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>home_automation</title>
      <link>https://sipp.io/blog/2015/04/29/home_automation/</link>
      <pubDate>Wed, 29 Apr 2015 19:57:12 +0200</pubDate>
      
      <guid>https://sipp.io/blog/2015/04/29/home_automation/</guid>
      <description>&lt;p&gt;IOT is gaining traction these days, and I have had some spare time lately to do some automation at home. I wanted to control heating, and ventilation without doing anything with the mains.&lt;/p&gt;

&lt;p&gt;There are many remote switches today that works with RF 433.92. I got some from a Swedish brand called NEXA. I got 5 of those, 2 rated at 2300W and some cheaper rated 1500W. These have a self learning system that allows for mixing and matching remotes.&lt;/p&gt;

&lt;p&gt;To control these I have an arduino with a cheap rf receiver and rf transmitter. The receiver is used for sniffing the remote id, with this code from &lt;a href=&#34;http://playground.arduino.cc/Code/HomeEasy&#34;&gt;arduino.cc&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/*
 * AM-HRR3 receiver test
 *
 * Homeeasy protocol receiver for the new protocol.
 *
 * This protocol isn&#39;t documented so well, so here goes (this is largely from memory).
 *
 * The data is encoded on the wire (aerial) as a Manchester code.
 *
 * A latch of 275us high, 2675us low is sent before the data.
 * There is a gap of 10ms between each message.
 *
 * 0 = holding the line high for 275us then low for 275us.
 * 1 = holding the line high for 275us then low for 1225us.
 * 
 * The timings seem to vary quite noticably between devices.  HE300 devices have a
 * low for about 1300us for a 1 whereas HE303 devices seem to have a low of about
 * 1100us.  If this script does not detect your signals try relaxing the timing
 * conditions.
 * 
 * Each actual bit of data is encoded as two bits on the wire as:
 * Data 0 = Wire 01
 * Data 1 = Wire 10
 *
 * The actual message is 32 bits of data (64 wire bits):
 * bits 0-25: the group code - a 26bit number assigned to controllers.
 * bit 26: group flag
 * bit 27: on/off flag
 * bits 28-31: the device code - a 4bit number.
 *
 * The group flag just seems to be a separate set of addresses you can program devices
 * to and doesn&#39;t trigger the dim cycle when sending two ONs.
 *
 * There&#39;s extra support for setting devices to a specific dim-level that you get
 * with the HE100 ultimate remote control. I think this involves sending a Wire 11 at
 * the on/off flag position and then the message is longer with another 4 bits for dim
 * level.
 * Need to look into this.
 *
 * Barnaby Gray 12/2008
 * Peter Mead   09/2009
 */

int rxPin = 12;


void setup()
{	pinMode(rxPin, INPUT);
	Serial.begin(9600);
}


void loop()
{
	int i = 0;
	unsigned long t = 0;

	byte prevBit = 0;
	byte bit = 0;

	unsigned long sender = 0;
	bool group = false;
	bool on = false;
	unsigned int recipient = 0;

	// latch 1
	while((t &amp;lt; 9480 || t &amp;gt; 10350))
	{	t = pulseIn(rxPin, LOW, 1000000);
	}

	// latch 2
	while(t &amp;lt; 2550 || t &amp;gt; 2700)
	{	t = pulseIn(rxPin, LOW, 1000000);
	}

	// data
	while(i &amp;lt; 64)
	{
		t = pulseIn(rxPin, LOW, 1000000);

		if(t &amp;gt; 200 &amp;amp;&amp;amp; t &amp;lt; 365)
		{	bit = 0;
		}
		else if(t &amp;gt; 1000 &amp;amp;&amp;amp; t &amp;lt; 1360)
		{	bit = 1;
		}
		else
		{	i = 0;
			break;
		}

		if(i % 2 == 1)
		{
			if((prevBit ^ bit) == 0)
			{	// must be either 01 or 10, cannot be 00 or 11
				i = 0;
				break;
			}

			if(i &amp;lt; 53)
			{	// first 26 data bits
				sender &amp;lt;&amp;lt;= 1;
				sender |= prevBit;
			}	
			else if(i == 53)
			{	// 26th data bit
				group = prevBit;
			}
			else if(i == 55)
			{	// 27th data bit
				on = prevBit;
			}
			else
			{	// last 4 data bits
				recipient &amp;lt;&amp;lt;= 1;
				recipient |= prevBit;
			}
		}

		prevBit = bit;
		++i;
	}

	// interpret message
	if(i &amp;gt; 0)
	{	printResult(sender, group, on, recipient);
	}
}


void printResult(unsigned long sender, bool group, bool on, unsigned int recipient)
{
	Serial.print(&amp;quot;sender &amp;quot;);
	Serial.println(sender);

	if(group)
	{	Serial.println(&amp;quot;group command&amp;quot;);
	}
	else
	{	Serial.println(&amp;quot;no group&amp;quot;);
	}

	if(on)
	{	Serial.println(&amp;quot;on&amp;quot;);
	}
	else
	{	Serial.println(&amp;quot;off&amp;quot;);
	}

	Serial.print(&amp;quot;recipient &amp;quot;);
	Serial.println(recipient);

	Serial.println();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then with an arduino the rf transmitter and an ethernet shield:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;SPI.h&amp;gt;
#include &amp;lt;Ethernet.h&amp;gt;
#include &amp;lt;NexaTransmitter.h&amp;gt;
#include &amp;lt;avr/wdt.h&amp;gt;

NexaTransmitter remote(7,  15551665); // Create the nexa remote on pin7 with remote id, remote id can be found using the script mentioned earlier

// assign a MAC address for the ethernet controller.
// fill in your address here:
byte mac[] = {
  0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02
};
// initialize the library instance:
EthernetClient client;

char server[] = &amp;quot;pi.sipp.io&amp;quot;;

unsigned long lastConnectionTime = 0;             // last time you connected to the server, in milliseconds
const unsigned long postingInterval = 10L * 1000L; // delay between updates, in milliseconds
// the &amp;quot;L&amp;quot; is needed to use long type numbers
String readString;
int x = 0;
char lf = 10;
void setup() {
  // start serial port:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  // give the ethernet module time to boot up:
  delay(1000);
  // start the Ethernet connection using a fixed IP address and DNS server:
  if (Ethernet.begin(mac) == 0) {
    Serial.println(&amp;quot;Failed to configure Ethernet using DHCP&amp;quot;);
    // no point in carrying on, so do nothing forevermore:
    for (;;)
      ;
  }
  // print the Ethernet board/shield&#39;s IP address:
  Serial.print(&amp;quot;My IP address: &amp;quot;);
  Serial.println(Ethernet.localIP());
  wdt_enable(WDTO_8S);
}

//Finding two crlf which separates the body from the header in the html response
String getBody() {
  readString = &amp;quot;&amp;quot;;
  char c;
  char d;
  char e;
  char f;
  while (client.available()) {
    f = e;
    e = d;
    d = c;
    c = client.read();
    if (c == 10 &amp;amp;&amp;amp; d == 13 &amp;amp;&amp;amp; e == 10 &amp;amp;&amp;amp; f == 13  ) {
      while (client.available()) {
        readString += (char)client.read();
      }
    }
  }
  return readString;
}

void loop() {
  wdt_reset();
  String body = getBody();
  if (body == &amp;quot;on temp&amp;quot;) {
    remote.setSwitch(true, 0);
  }
  
  if (body == &amp;quot;off temp&amp;quot;) {
    remote.setSwitch(false, 0);
  } 
  
  if (body == &amp;quot;on air&amp;quot;) {
    remote.setSwitch(true, 1);
  }
  
  if (body == &amp;quot;off air&amp;quot;) {
    remote.setSwitch(false, 1);
  } 

  if (millis() - lastConnectionTime &amp;gt; postingInterval) {
    httpRequest(&amp;quot;GET /heater/ HTTP/1.1&amp;quot;);
  }

}

// this method makes a HTTP connection to the server:
void httpRequest(String url) {
  // close any connection before send a new request.
  // This will free the socket on the WiFi shield
  client.stop();

  // if there&#39;s a successful connection:
  if (client.connect(server, 80)) {
  //  Serial.println(&amp;quot;connecting...&amp;quot;);
    // send the HTTP PUT request:
    client.println(url);
    client.println(&amp;quot;Host: sipp.io&amp;quot;);
    client.println(&amp;quot;User-Agent: arduino-ethernet&amp;quot;);
    client.println(&amp;quot;Connection: close&amp;quot;);
    client.println();

    // note the time that the connection was made:
    lastConnectionTime = millis();
  }
  else {
    // if you couldn&#39;t make a connection:
   // Serial.println(&amp;quot;connection failed&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And on the server the arduino is pulling from I have a go server, which reads my Netatmo station and changes the values according to the given parameters to ensure a healthy indoor climate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crosscompile to rasberry pi</title>
      <link>https://sipp.io/blog/2015/04/19/crosscompile-to-rasberry-pi/</link>
      <pubDate>Sun, 19 Apr 2015 20:15:26 +0200</pubDate>
      
      <guid>https://sipp.io/blog/2015/04/19/crosscompile-to-rasberry-pi/</guid>
      <description>&lt;p&gt;Crosscompile to rasberry pi.&lt;/p&gt;

&lt;p&gt;From mac:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
brew reinstall go --cross-compile-all
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GOOS=linux GOARCH=arm go build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now copy the binary to rasberry pi and rund it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mother&#39;s American Cinnemon Rolls</title>
      <link>https://sipp.io/blog/2015/04/18/mothers-american-cinnemon-rolls/</link>
      <pubDate>Sat, 18 Apr 2015 09:12:48 +0200</pubDate>
      
      <guid>https://sipp.io/blog/2015/04/18/mothers-american-cinnemon-rolls/</guid>
      <description>&lt;p&gt;Gives 30 rolls.
Dough:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;50 g yeast&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; cup warm water 115g&lt;/li&gt;
&lt;li&gt;1 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; cup milk, heated to boiling then cooled to luke warm 350g&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; cup sugar 105g&lt;/li&gt;
&lt;li&gt;2 tsp salt 11g&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; cup butter 107g&lt;/li&gt;
&lt;li&gt;7 to 8 cups flour 800g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Raise for 1 hour.&lt;/p&gt;

&lt;p&gt;Filling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10 tbsp butter 50g&lt;/li&gt;
&lt;li&gt;1 cup sugar 210g&lt;/li&gt;
&lt;li&gt;8 tsp cinnamon 20g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make 2 flat mats. Add filling, roll and cut. Raise another hour.
Baked in the oven in a pan with baking paper. 220 °C 20 mins&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sipp.io registrered</title>
      <link>https://sipp.io/blog/2015/04/17/sipp.io-registrered/</link>
      <pubDate>Fri, 17 Apr 2015 20:48:00 +0200</pubDate>
      
      <guid>https://sipp.io/blog/2015/04/17/sipp.io-registrered/</guid>
      <description>&lt;p&gt;Registrered sipp.io today. The name was found by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for domain in `cat * | perl -ne&#39;s/io$/.io/ &amp;amp;&amp;amp; print lc if length == 7&#39;` ; do whois $domain | grep &amp;quot;is available for purchase&amp;quot; ; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where cat * is the path to a dictionary.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>